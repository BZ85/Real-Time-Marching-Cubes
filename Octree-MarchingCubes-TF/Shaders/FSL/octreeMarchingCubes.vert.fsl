/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

 // Shader for octree marching cubes surfaces 

#include "resources.h.fsl"

STRUCT(VSInput)
{
    DATA(float3, Position, POSITION);
    DATA(float3, Normal, NORMAL);
};

STRUCT(VSOutput)
{
    DATA(float4, Position, SV_Position);
    DATA(float4, Normal, NORMAL);
    DATA(float3, viewPosition, TEXCOORD0);
};

ROOT_SIGNATURE(DefaultRootSignature)
VSOutput VS_MAIN(VSInput In, SV_InstanceID(uint) InstanceID)
{
    INIT_MAIN;
    VSOutput Out;

    float4 viewPosition = mul(gOMCUniformBlock.mView, mul(gOMCUniformBlock.modelMatrix, float4(In.Position, 1.0)) ) ;
    
    Out.Position = mul(gOMCUniformBlock.mProject, viewPosition );
    
    Out.viewPosition = viewPosition.xyz;
    
   // Out.Normal = float4(In.Normal, 1.0);  // Pass normal to fragment shader
  
  Out.Normal = normalize( mul(gOMCUniformBlock.normalMatrix, float4(In.Normal, 0.0)) );

  
  RETURN(Out);

}
