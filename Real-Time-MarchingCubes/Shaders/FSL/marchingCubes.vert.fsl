/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

 // Shader for  marching cubes surfaces 

#include "resources.h.fsl"


STRUCT(VSOutput)
{
    DATA(float4, Position, SV_Position);
    DATA(float4, Normal, NORMAL);
    DATA(float3, viewPosition, TEXCOORD0);
    DATA(float, WorldHeight, TEXCOORD1);
};

ROOT_SIGNATURE(DefaultRootSignature)
VSOutput VS_MAIN(SV_VertexID(uint) vertexID ) // read the RWBuffer (from compute shader) according to vertexID
{
    INIT_MAIN;
    VSOutput Out;

// read the data from triangle buffer output by compute shader (marchingCubesPassTwo)
    float3 pos = float3(
        gTriangleBuffer[vertexID * 6 + 0],
        gTriangleBuffer[vertexID * 6 + 1],
        gTriangleBuffer[vertexID * 6 + 2]
    );

    float3 normal = float3(
        gTriangleBuffer[vertexID * 6 + 3],
        gTriangleBuffer[vertexID * 6 + 4],
        gTriangleBuffer[vertexID * 6 + 5]
    );

    // Out.Position = float4(pos, 1.0);

      float4 viewPosition = mul(gMCUniformBlock.mView, mul(gMCUniformBlock.modelMatrix, float4(pos, 1.0)) ) ;
    
     Out.Position = mul(gMCUniformBlock.mProject, viewPosition );
     Out.viewPosition = viewPosition.xyz;

    // Out.Normal = float4(normal, 1.0);
    Out.Normal = normalize( mul(gMCUniformBlock.normalMatrix, float4(normal, 0.0)) );
    Out.WorldHeight = mul(gMCUniformBlock.modelMatrix, float4(pos, 1.0)).y;
  RETURN(Out);

}
