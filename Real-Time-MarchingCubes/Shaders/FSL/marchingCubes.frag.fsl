/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Shader for marching cubes surfaces with phong shading


#include "resources.h.fsl"

STRUCT(VSOutput)
{
    DATA(float4, Position, SV_Position);
    DATA(float4, Normal, NORMAL);
    DATA(float3, viewPosition, TEXCOORD0);
    DATA(float, WorldHeight, TEXCOORD1);
};

ROOT_SIGNATURE(DefaultRootSignature)
float4 PS_MAIN(VSOutput In)
{
    INIT_MAIN;
 
   float height = In.WorldHeight;

    // interpolate the color

    float3 baseColor;
    if (height < MID_HEIGHT) // in the range from low to mid
    {
        // Normalize the height
        float t2 = clamp((height - LOW_HEIGHT) / (MID_HEIGHT - LOW_HEIGHT), 0.0, 1.0);
        baseColor = lerp(COLOR_GRASS, COLOR_DIRT, t2);
    }
    else // in the range from mid to high
    {  
        // Normalize the height 
        float t2 = clamp((height - MID_HEIGHT) / (HIGH_HEIGHT - MID_HEIGHT), 0.0, 1.0);
        baseColor = lerp(COLOR_DIRT, COLOR_SNOW, t2);
    }
 


 // phong shading 
 float4 color;

  if(!gMCUniformBlock.ifMetaballs){
 float3 viewLightDirection = mul(gMCUniformBlock.mView, gMCUniformBlock.lightDirection).xyz;
 
 float3 eyedir = normalize(float3(0, 0, 0) - In.viewPosition);
 
 float3 reflectDir = -reflect(viewLightDirection, In.Normal.xyz);

 float d = max(dot(gMCUniformBlock.lightDirection, In.Normal), 0.0f);
 float s = max(dot(reflectDir, eyedir), 0.0f);

 float shadingValue = gMCUniformBlock.ka * gMCUniformBlock.La + d * gMCUniformBlock.kd * gMCUniformBlock.Ld + pow(s, gMCUniformBlock.alpha) * gMCUniformBlock.ks * gMCUniformBlock.Ls;

 // use the baseColor (computed before) to do phong shading

  color = shadingValue * float4(baseColor, 1.0f); 
  //color = float4(0.f, 0.f, 0.f, 0.f); 
 }

 else color = float4(baseColor, 1.0f);
 
 RETURN(color);

}
